#0) Loading example data with base-type genotype

data(duck)
data <- duck$SNP
head(data)
SNP <- data$genotype
Info <- data$info
##install the GWLD packages

#devtools::install_github("Rong-Zh/GWLD/GWLD-R")

##using packages

library(GWLD)
#0) Loading example data with base-type genotype

data(duck)
data <- duck$SNP
head(data)
SNP <- data$genotype
Info <- data$info
Info
head(Info)
# extract only   CHROM    POS            ID
Info<-Info[,c(1,2,9)]
############### using vcf

library(GWLD)
# Recode the genotypes in vcf file as 0, 1, 2, NA, or recode to another type
vcf_data <- read.vcf("/home/samman/Documents/publishing/Drought_Ahmed_Master/ReDoingGWAS/Data/GenotypicData.vcf", genotype="int")
# SNPs are after the 9th column
SNPs <- vcf_data[, 10:ncol(vcf_data)]
Info <- vcf_data[, 1:9]
colnames(Info) <- c("CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT")
Info<-as.data.frame(Info)
Info$ID <- paste0(Info$CHROM,":",Info$POS)
# extract only   CHROM    POS            ID
Info<-Info[,c(1,2,9)]
# convert to numeric by applying as.numeric to each column
SNPs <- apply(SNPs, 2, as.numeric)
head(Info)
# Recode the genotypes in vcf file as 0, 1, 2, NA, or recode to another type
vcf_data <- read.vcf("/home/samman/Documents/publishing/Drought_Ahmed_Master/ReDoingGWAS/Data/GenotypicData.vcf", genotype="int")
# SNPs are after the 9th column
SNPs <- vcf_data[, 10:ncol(vcf_data)]
Info <- vcf_data[, 1:9]
colnames(Info) <- c("CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT")
Info<-as.data.frame(Info)
Info$ID <- paste0(Info$CHROM,":",Info$POS)
# Recode the genotypes in vcf file as 0, 1, 2, NA, or recode to another type
vcf_data <- read.vcf("/home/samman/Documents/publishing/Drought_Ahmed_Master/ReDoingGWAS/Data/GenotypicData.vcf", genotype="int")
# SNPs are after the 9th column
SNPs <- vcf_data[, 10:ncol(vcf_data)]
Info <- vcf_data[, 1:9]
head(Info)
# Recode the genotypes in vcf file as 0, 1, 2, NA, or recode to another type
vcf_data <- read.vcf("/home/samman/Documents/publishing/Drought_Ahmed_Master/ReDoingGWAS/Data/GenotypicData.vcf", genotype="int")
# remove multi-allelic SNPs that have , in the ALT column
vcf_data <- vcf_data[vcf_data$ALT != ",", ]
# Recode the genotypes in vcf file as 0, 1, 2, NA, or recode to another type
vcf_data <- read.vcf("/home/samman/Documents/publishing/Drought_Ahmed_Master/ReDoingGWAS/Data/GenotypicData.vcf", genotype="int")
head(vcf_data)
# remove multi-allelic SNPs that have , in the ALT column
vcf_data <- vcf_data[vcf_data[, 5] != ",", ]
head(vcf_data)
# remove multi-allelic SNPs that have , in the ALT column
vcf_data <- vcf_data[vcf_data[, 5] != ",", ]
# SNPs are after the 9th column
SNPs <- vcf_data[, 10:ncol(vcf_data)]
Info <- vcf_data[, 1:9]
head(Info)
colnames(Info) <- c("CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT")
Info<-as.data.frame(Info)
# Recode the genotypes in vcf file as 0, 1, 2, NA, or recode to another type
vcf_data <- read.vcf("/home/samman/Documents/publishing/Drought_Ahmed_Master/ReDoingGWAS/Data/GenotypicData.vcf", genotype="int")
# remove multi-allelic SNPs that have , in the ALT column
vcf_data <- vcf_data[vcf_data[, 5] != ",", ]
# SNPs are after the 9th column
SNPs <- vcf_data[, 10:ncol(vcf_data)]
Info <- vcf_data[, 1:9]
colnames(Info) <- c("CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT")
Info<-as.data.frame(Info)
Info$ID <- paste0(Info$CHROM,":",Info$POS,"_",Info$REF,",",Info$ALT)
# extract only   CHROM    POS            ID
Info<-Info[,c("CHROM","POS","ID")]
head(Info)
# Recode the genotypes in vcf file as 0, 1, 2, NA, or recode to another type
vcf_data <- read.vcf("/home/samman/Documents/publishing/Drought_Ahmed_Master/ReDoingGWAS/Data/GenotypicData.vcf", genotype="int")
# remove multi-allelic SNPs that have , in the ALT column
vcf_data <- vcf_data[vcf_data[, 5] != ",", ]
# remove SNPs with . in the ALT column
vcf_data <- vcf_data[vcf_data[, 5] != ".", ]
# SNPs are after the 9th column
SNPs <- vcf_data[, 10:ncol(vcf_data)]
Info <- vcf_data[, 1:9]
colnames(Info) <- c("CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT")
Info<-as.data.frame(Info)
Info$ID <- paste0(Info$CHROM,":",Info$POS,"_",Info$REF,",",Info$ALT)
# extract only   CHROM    POS            ID
Info<-Info[,c("CHROM","POS","ID")]
head(Info)
# convert to numeric by applying as.numeric to each column
SNPs <- apply(SNPs, 2, as.numeric)
SNPs <-t(SNPs)
colnames(SNPs) <- Info$ID
# Select Random 50 SNPs
snprandom <- sample(1:nrow(SNPs), 50)
SNPs<-SNPs[,snprandom]
Info<-Info[snprandom,]
#2) calculate with different methods (D, Dâ€™, r2, RMI, MI)
result <- GWLD(SNPs, method = "r^2", cores = 1)
##or use the following code `

r2 <- LD(SNPs, method = "r^2", cores = 1)
rmi <- RMI(SNPs, cores=1)
mi <- MI(SNPs, cores=1)
#2.1) LD heatmap plot
p <- HeatMap(SNPs, method = "RMI", SnpPosition = as.numeric(Info$POS), SnpName = Info$ID, cores = 1, color = "YellowTored", showLDvalues = F)
p
#3) decay from result(step 2)

#rmi_decay <- decay(rmi, Info)

#or calculate circos from data

#rmi_decay <- calc_decay(SNP, Info, method="RMI")

#4) circos from result(step 2)

rmi_circos <- circos(rmi, Info, threshold=0.2)
